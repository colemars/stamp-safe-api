service: stampsafe-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-include-dependencies

package:
  excludeDevDependencies: false
  exclude:
    - node_modules/** # no need to add this yourself, this plugin does it for you
  individually: true

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-west-2

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create-stage:
    handler: create-stage.main
    events:
      - http:
          path: stage
          method: post
          cors: true
          authorizer: aws_iam
  create-report:
    handler: create-report.main
    events:
      - http:
          path: report
          method: post
          cors: true
          authorizer: aws_iam
  get-stage:
      # Defines an HTTP API endpoint that calls the main function in get.js
      # - path: url path is /notes/{id}
      # - method: GET request
      handler: get-stage.main
      events:
        - http:
            path: stage/{id}
            method: get
            cors: true
            authorizer: aws_iam
  get-report:
      # Defines an HTTP API endpoint that calls the main function in get.js
      # - path: url path is /notes/{id}
      # - method: GET request
      handler: get-report.main
      events:
        - http:
            path: report/{id}
            method: get
            cors: true
            authorizer: aws_iam
  get-stolen-records:
    handler: get-stolen-records.main
    events:
      - http:
          path: stolen
          method: post
          cors: true
          authorizer: aws_iam
  update-stage:
      # Defines an HTTP API endpoint that calls the main function in update.js
      # - path: url path is /notes/{id}
      # - method: PUT request
      handler: update-stage.main
      events:
        - http:
            path: stage/{id}
            method: put
            cors: true
            authorizer: aws_iam
  update-report:
      # Defines an HTTP API endpoint that calls the main function in update.js
      # - path: url path is /notes/{id}
      # - method: PUT request
      handler: update-report.main
      events:
        - http:
            path: report/{id}
            method: put
            cors: true
            authorizer: aws_iam
  delete-stage:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete-stage.main
    events:
      - http:
          path: stage/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  delete-report:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete-report.main
    events:
      - http:
          path: report/{id}
          method: delete
          cors: true
          authorizer: aws_iam          
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}